@startuml

autoactivate on

actor "Admin user" as User
boundary "Admin panel" as GUI
control "Administrative API" as API
database MongoDB
entity "Blockchain Manager" as BM
entity "P2P Node" as P2P
entity "Node" as RN
entity "Other nodes" as ON

User -> BM ** : start()
activate BM
BM -> MongoDB : connection_to_db()
return database_connection
BM -> API ** : start()
activate API
group at any time api will respond
  GUI -> API: any_request()
  return response
end
return api
BM -> P2P ** : start()
activate P2P
P2P -> P2P:start_and_open_for_connections()
deactivate P2P
group at any time node will respond
  ON -> P2P: any_request()
  return response
end
return node
BM -> P2P: sync_blockchain()
loop until_chain_is_synced
  P2P -> ON : connect_to_all_nodes_and_ask_for_chain_size(nodes_list.txt)
  return (connections_to_nodes, chain_size)
  P2P -> P2P: select_best_node(connections_to_nodes, chain_size, nodes_list.txt)
    note left
    selecting the best node is based on the chain size
    and node status - if it's an authenticated node
    between nodes as good the selection is random
    end note
  return node_ip
  P2P -> RN ** : connect_to_node()
  activate RN
  return connection_to_node
  P2P -> RN : sync_nodes_list(nodes_list_hash)
  return nodes_list.txt
  P2P -> RN : compare_blockchain(own_length, own_last_hash)
  return (lenght, last_hash)
  loop foreach missing block
    P2P -> RN: ask_for_block(index)
    return block
    P2P -> BM: validate_block(block)
    BM -> BM: validate_block_with_authenticated_users_keys(block)
    return is_valid
    alt#Gold  #LightBlue block is valid
      BM -> MongoDB: add_block(block)
      return block_saved_msg
      P2P -[hidden]> BM
      return continue
    else #Pink
      BM -> BM: mark_node_as_unsafe(Node)
      return 
      return break_loop
    end
  end
  destroy RN
  P2P -> P2P: select_all_nodes_but_best(connections_to_nodes, chain_size, nodes_list.txt)
  return not_best_nodes_list
  loop foreach node in not_best_nodes_list
    P2P -> RN **: connect_to_node(node)
    activate RN
    return connection_to_node
    P2P ->> RN: ask_to_sync(chain_size)
    note right
    Is the requesting node a valid node in my list?
    Is the size in request greater than my own?
    end note
    deactivate RN
  end
  destroy RN
  return block_is_synced
end
return service_ready
@enduml